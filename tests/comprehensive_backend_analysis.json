{
  "metadata": {
    "scan_timestamp": "2025-06-26T21:15:28.840389",
    "backend_path": "E:\\Projects\\opt\\backend",
    "analyzer_version": "1.0.0"
  },
  "summary": {
    "total_files": 73,
    "total_lines": 266,
    "total_functions": 400,
    "total_classes": 143,
    "total_endpoints": 0,
    "total_issues": 219,
    "quality_score": 0
  },
  "quality_metrics": {
    "issues_by_severity": {
      "error": 10,
      "warning": 207,
      "info": 2
    },
    "issues_by_category": {
      "style": 189,
      "security": 18,
      "imports": 9,
      "maintenance": 2,
      "file_access": 1
    },
    "quality_score": 0
  },
  "endpoint_inventory": {
    "by_file": {},
    "by_method": {},
    "total_count": 0,
    "all_endpoints": []
  },
  "file_analysis": {
    "adaptive_learning.py": {
      "file": "adaptive_learning.py",
      "lines": 3,
      "functions": [
        {
          "name": "__init__",
          "line": 76,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_classify_feedback",
          "line": 164,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        },
        {
          "name": "_count_follow_up_indicators",
          "line": 268,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 287,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "FeedbackType",
          "line": 33,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "InteractionMetrics",
          "line": 44,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "LearningPattern",
          "line": 61,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "ConversationAnalyzer",
          "line": 73,
          "methods": 3,
          "has_docstring": true
        },
        {
          "name": "AdaptiveLearningSystem",
          "line": 284,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 13
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 14
        },
        {
          "type": "from",
          "module": "collections",
          "names": [
            "defaultdict"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "collections",
          "names": [
            "deque"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "enum",
          "names": [
            "Enum"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "db_manager"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "get_embedding"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "index_document_chunks"
          ],
          "line": 27,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "retrieve_user_memory"
          ],
          "line": 28,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "MemoryErrorHandler"
          ],
          "line": 29,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 30,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "cache_manager.py": {
      "file": "cache_manager.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 23,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_check_cache_version",
          "line": 27,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_get_system_prompt_hash",
          "line": 45,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "check_system_prompt_change",
          "line": 49,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "invalidate_chat_cache",
          "line": 67,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "invalidate_all_cache",
          "line": 87,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "validate_response_format",
          "line": 113,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "set_with_validation",
          "line": 135,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "get_with_validation",
          "line": 158,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "get_cache_stats",
          "line": 200,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        }
      ],
      "classes": [
        {
          "name": "CacheManager",
          "line": 16,
          "methods": 10,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "hashlib"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 13,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "config.py": {
      "file": "config.py",
      "lines": 1,
      "functions": [
        {
          "name": "get_app_start_time",
          "line": 59,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "log_system_info",
          "line": 63,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "log_environment_variables",
          "line": 72,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "load_persona",
          "line": 93,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "platform"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 96
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 102,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "database.py": {
      "file": "database.py",
      "lines": 1,
      "functions": [
        {
          "name": "get_cache_manager",
          "line": 25,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "get_redis_client",
          "line": 36,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_chroma_collection",
          "line": 41,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_embedding_model",
          "line": 46,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_database_health",
          "line": 51,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_cache",
          "line": 59,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "set_cache",
          "line": 84,
          "args": 6,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "store_chat_history",
          "line": 105,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_chat_history",
          "line": 146,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "index_document_chunks",
          "line": 187,
          "args": 6,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "index_user_document",
          "line": 236,
          "args": 8,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "retrieve_user_memory",
          "line": 257,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 15
        },
        {
          "name": "get_embedding",
          "line": 361,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "_get_cache_operation",
          "line": 66,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        },
        {
          "name": "_set_cache_operation",
          "line": 91,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_store_chat_operation",
          "line": 108,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_store_chat_operation",
          "line": 129,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_chat_operation",
          "line": 149,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_chat_operation",
          "line": 170,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_index_op",
          "line": 190,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 5
        },
        {
          "name": "_retrieve_memory",
          "line": 263,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 15
        },
        {
          "name": "_get_embedding",
          "line": 366,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 1
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 2
        },
        {
          "type": "from",
          "module": "utilities.ai_tools",
          "names": [
            "chunk_text"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "cache_manager",
          "names": [
            "CacheManager"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "DatabaseManager"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "MemoryErrorHandler"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "RedisConnectionHandler"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "safe_execute"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 363
        },
        {
          "type": "from",
          "module": "user_profiles",
          "names": [
            "user_profile_manager"
          ],
          "line": 323,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "database_manager.py": {
      "file": "database_manager.py",
      "lines": 1,
      "functions": [
        {
          "name": "create_db_manager",
          "line": 777,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_cache",
          "line": 953,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "set_cache",
          "line": 965,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_or_create_collection",
          "line": 38,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "list_collections",
          "line": 39,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "heartbeat",
          "line": 40,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "add",
          "line": 43,
          "args": 5,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "query",
          "line": 45,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 74,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_initialize_chroma_collection",
          "line": 350,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_verify_chroma_connection",
          "line": 364,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "is_embeddings_available",
          "line": 423,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_cache",
          "line": 658,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "clear_cache",
          "line": 662,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_cache_stats",
          "line": 667,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "is_initialized",
          "line": 739,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "initialization_failed",
          "line": 743,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "store_operation",
          "line": 1009,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        },
        {
          "name": "get_operation",
          "line": 565,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 7
        },
        {
          "name": "store_operation",
          "line": 599,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "load_or_download_model",
          "line": 246,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "ChromaClientProtocol",
          "line": 37,
          "methods": 3,
          "has_docstring": false
        },
        {
          "name": "ChromaCollectionProtocol",
          "line": 42,
          "methods": 2,
          "has_docstring": false
        },
        {
          "name": "ComponentHealth",
          "line": 48,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DatabaseHealth",
          "line": 52,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ChromaResults",
          "line": 57,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "Match",
          "line": 63,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "QueryResponse",
          "line": 68,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DatabaseManager",
          "line": 71,
          "methods": 9,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional",
            "Union",
            "Any",
            "Dict",
            "List",
            "TypedDict",
            "cast",
            "Sequence",
            "Protocol"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "chromadb"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "chromadb.config",
          "names": [
            "Settings"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "redis"
          ],
          "line": 15
        },
        {
          "type": "from",
          "module": "sentence_transformers",
          "names": [
            "SentenceTransformer"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "numpy.typing",
          "names": [
            "NDArray"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "numpy"
          ],
          "line": 18
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "RedisConnectionHandler"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.validation",
          "names": [
            "DatabaseConfig",
            "ChatMessage",
            "validate_query_params"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.memory_pool",
          "names": [
            "MemoryPool"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.memory_monitor",
          "names": [
            "MemoryPressureMonitor"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.cache_manager",
          "names": [
            "CacheManager"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "alert_memory_pressure",
            "alert_service_down"
          ],
          "line": 29,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "CHROMA_HOST",
            "CHROMA_PORT",
            "USE_HTTP_CHROMA"
          ],
          "line": 151,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "get_alert_manager"
          ],
          "line": 840,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "EMBEDDING_MODEL",
            "EMBEDDING_PROVIDER",
            "SENTENCE_TRANSFORMERS_HOME",
            "AUTO_PULL_MODELS"
          ],
          "line": 211,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "SENTENCE_TRANSFORMERS_HOME",
            "AUTO_PULL_MODELS"
          ],
          "line": 233,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 234
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "OLLAMA_BASE_URL",
            "AUTO_PULL_MODELS"
          ],
          "line": 277,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 278
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "OLLAMA_BASE_URL"
          ],
          "line": 318,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "EMBEDDING_PROVIDER"
          ],
          "line": 527,
          "level": 0
        },
        {
          "type": "from",
          "module": "sentence_transformers",
          "names": [
            "SentenceTransformer"
          ],
          "line": 247,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.llm_service",
          "names": [
            "llm_service"
          ],
          "line": 552,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "enhanced_document_processing.py": {
      "file": "enhanced_document_processing.py",
      "lines": 36,
      "functions": [
        {
          "name": "__init__",
          "line": 88,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_classify_document_type",
          "line": 122,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "_detect_language",
          "line": 200,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_calculate_complexity",
          "line": 208,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_calculate_structure_score",
          "line": 239,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_extract_entities",
          "line": 295,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 335,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_select_optimal_strategy",
          "line": 401,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "_fixed_size_chunking",
          "line": 444,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_paragraph_chunking",
          "line": 463,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "_code_aware_chunking",
          "line": 539,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_breaks_code_structure",
          "line": 554,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_adjust_code_boundaries",
          "line": 563,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "_calculate_chunk_similarity",
          "line": 610,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_assess_chunk_quality",
          "line": 660,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "ChunkingStrategy",
          "line": 32,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "DocumentType",
          "line": 43,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "DocumentMetadata",
          "line": 55,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "ProcessedChunk",
          "line": 72,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "DocumentAnalyzer",
          "line": 85,
          "methods": 6,
          "has_docstring": true
        },
        {
          "name": "EnhancedChunker",
          "line": 332,
          "methods": 9,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "hashlib"
          ],
          "line": 14
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 15
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 16
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "enum",
          "names": [
            "Enum"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Tuple"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "langchain.text_splitter",
          "names": [
            "RecursiveCharacterTextSplitter"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "MemoryErrorHandler"
          ],
          "line": 28,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 29,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "enhanced_integration.py": {
      "file": "enhanced_integration.py",
      "lines": 1,
      "functions": [
        {
          "name": "_get_strategy_description",
          "line": 267,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_get_document_type_description",
          "line": 280,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 14
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 15
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 16
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "File"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "Form"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "UploadFile"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "adaptive_learning",
          "names": [
            "FeedbackType"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "from",
          "module": "adaptive_learning",
          "names": [
            "adaptive_learning_system"
          ],
          "line": 27,
          "level": 0
        },
        {
          "type": "from",
          "module": "adaptive_learning",
          "names": [
            "start_learning_background_tasks"
          ],
          "line": 28,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "db_manager"
          ],
          "line": 29,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "index_document_chunks"
          ],
          "line": 30,
          "level": 0
        },
        {
          "type": "from",
          "module": "enhanced_document_processing",
          "names": [
            "ChunkingStrategy"
          ],
          "line": 31,
          "level": 0
        },
        {
          "type": "from",
          "module": "enhanced_document_processing",
          "names": [
            "DocumentType"
          ],
          "line": 32,
          "level": 0
        },
        {
          "type": "from",
          "module": "enhanced_document_processing",
          "names": [
            "enhanced_chunker"
          ],
          "line": 33,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "log_error"
          ],
          "line": 34,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 35,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "enhanced_streaming.py": {
      "file": "enhanced_streaming.py",
      "lines": 1,
      "functions": [
        {
          "name": "setup_default_listeners",
          "line": 324,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "update",
          "line": 34,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "register_listener",
          "line": 56,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 95,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 245,
          "args": 8,
          "is_async": false,
          "has_docstring": false,
          "complexity": 4
        },
        {
          "name": "__new__",
          "line": 286,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        },
        {
          "name": "track_usage",
          "line": 291,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_usage",
          "line": 298,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_total_usage",
          "line": 302,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "clear_usage",
          "line": 309,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "UsageMetadata",
          "line": 24,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "StreamEvent",
          "line": 44,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "EventDispatcher",
          "line": 52,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "StreamMonitor",
          "line": 92,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "StreamingResponseWithEvents",
          "line": 242,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "UsageTracker",
          "line": 280,
          "methods": 5,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any",
            "AsyncGenerator",
            "Callable",
            "Union",
            "Awaitable"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "dataclass",
            "asdict"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "StreamingResponse"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "tenacity",
          "names": [
            "retry",
            "stop_after_attempt",
            "wait_exponential",
            "retry_if_exception_type"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 16,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "error_handler.py": {
      "file": "error_handler.py",
      "lines": 1,
      "functions": [
        {
          "name": "log_error",
          "line": 21,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_user_friendly_message",
          "line": 34,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "safe_execute",
          "line": 244,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "with_error_handling",
          "line": 260,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "create_error_response",
          "line": 83,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "handle_chat_error",
          "line": 108,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "handle_tool_error",
          "line": 135,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "handle_cache_error",
          "line": 166,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "handle_memory_error",
          "line": 183,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "handle_redis_error",
          "line": 201,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "is_recoverable_error",
          "line": 223,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "decorator",
          "line": 263,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        },
        {
          "name": "wrapper",
          "line": 264,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "ErrorResponse",
          "line": 66,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "ErrorHandler",
          "line": 79,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ChatErrorHandler",
          "line": 104,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ToolErrorHandler",
          "line": 131,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "CacheErrorHandler",
          "line": 162,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "MemoryErrorHandler",
          "line": 179,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "RedisConnectionHandler",
          "line": 197,
          "methods": 2,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "redis"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 16,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "feedback_router.py": {
      "file": "feedback_router.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 1
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 3,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "Request"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "status"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "enhanced_integration",
          "names": [
            "submit_interaction_feedback"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "log_error"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 10,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "human_logging.py": {
      "file": "human_logging.py",
      "lines": 1,
      "functions": [
        {
          "name": "log_service_status",
          "line": 147,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "log_api_request",
          "line": 168,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "log_chat_interaction",
          "line": 181,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "init_logging",
          "line": 199,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 60,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "format",
          "line": 64,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "setup",
          "line": 112,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "ColoredFormatter",
          "line": 57,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "HumanLogger",
          "line": 108,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 10,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "main.py": {
      "file": "main.py",
      "lines": 11,
      "functions": [
        {
          "name": "verify_api_key",
          "line": 133,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 95,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "TimeoutMiddleware",
          "line": 94,
          "methods": 1,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "uuid"
          ],
          "line": 6
        },
        {
          "type": "from",
          "module": "contextlib",
          "names": [
            "asynccontextmanager"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "FastAPI",
            "Request",
            "Body",
            "Depends",
            "HTTPException"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "StreamingResponse",
            "JSONResponse"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "starlette.middleware.base",
          "names": [
            "BaseHTTPMiddleware"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 14
        },
        {
          "type": "from",
          "module": "utilities.cpu_enforcer",
          "names": [
            "enforce_cpu_only_mode"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "DEFAULT_MODEL",
            "OLLAMA_BASE_URL",
            "DEFAULT_SYSTEM_PROMPT"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "handlers",
          "names": [
            "create_exception_handlers"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_api_request",
            "log_service_status"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "models",
          "names": [
            "ChatRequest",
            "ChatResponse",
            "OpenAIMessage",
            "OpenAIChatRequest",
            "ModelListResponse",
            "ErrorResponse"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "from",
          "module": "routes",
          "names": [
            "health_router",
            "chat_router",
            "models_router",
            "upload_router",
            "pipeline_router",
            "debug_router"
          ],
          "line": 30,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.llm_service",
          "names": [
            "call_llm",
            "call_llm_stream"
          ],
          "line": 31,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.streaming_service",
          "names": [
            "streaming_service",
            "STREAM_SESSION_STOP",
            "STREAM_SESSION_METADATA"
          ],
          "line": 32,
          "level": 0
        },
        {
          "type": "from",
          "module": "startup",
          "names": [
            "startup_event"
          ],
          "line": 33,
          "level": 0
        },
        {
          "type": "from",
          "module": "model_manager",
          "names": [
            "router",
            "initialize_model_cache"
          ],
          "line": 36,
          "level": 0
        },
        {
          "type": "from",
          "module": "enhanced_integration",
          "names": [
            "enhanced_router"
          ],
          "line": 37,
          "level": 0
        },
        {
          "type": "from",
          "module": "feedback_router",
          "names": [
            "feedback_router"
          ],
          "line": 38,
          "level": 0
        },
        {
          "type": "from",
          "module": "adaptive_learning",
          "names": [
            "adaptive_learning_system"
          ],
          "line": 39,
          "level": 0
        },
        {
          "type": "from",
          "module": "pipelines.pipelines_v1_routes",
          "names": [
            "router"
          ],
          "line": 40,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager",
            "get_embedding",
            "index_user_document",
            "retrieve_user_memory"
          ],
          "line": 43,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "get_cache",
            "set_cache",
            "get_chat_history",
            "store_chat_history",
            "get_database_health",
            "db_manager"
          ],
          "line": 46,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "CacheErrorHandler",
            "safe_execute",
            "log_error"
          ],
          "line": 50,
          "level": 0
        },
        {
          "type": "from",
          "module": "security",
          "names": [
            "configure_security",
            "validate_environment"
          ],
          "line": 73,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "models.py": {
      "file": "models.py",
      "lines": 1,
      "functions": [],
      "classes": [
        {
          "name": "ChatRequest",
          "line": 9,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ChatResponse",
          "line": 13,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "OpenAIMessage",
          "line": 17,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "OpenAIChatRequest",
          "line": 21,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "OpenAIChoice",
          "line": 29,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "OpenAIChatResponse",
          "line": 34,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "StreamChoice",
          "line": 42,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "StreamResponse",
          "line": 47,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ModelInfo",
          "line": 55,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ModelListResponse",
          "line": 64,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "MemoryRequest",
          "line": 69,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "MemoryResponse",
          "line": 75,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "LearningRequest",
          "line": 81,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "LearningResponse",
          "line": 90,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "PipelineInfo",
          "line": 97,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "PipelineListResponse",
          "line": 111,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ServiceHealth",
          "line": 115,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DatabaseHealth",
          "line": 121,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "HealthResponse",
          "line": 126,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DetailedHealthResponse",
          "line": 132,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ErrorDetail",
          "line": 140,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ErrorResponse",
          "line": 148,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "CacheStatusResponse",
          "line": 152,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "SessionInfo",
          "line": 157,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "SessionStatusResponse",
          "line": 164,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ModelTestRequest",
          "line": 171,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ModelTestResponse",
          "line": 174,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "RefreshModelsResponse",
          "line": 181,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ModelCacheStatusResponse",
          "line": 188,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Union",
            "Any"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 6,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "model_manager.py": {
      "file": "model_manager.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 1
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 2
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 3
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 9,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "rag.py": {
      "file": "rag.py",
      "lines": 16,
      "functions": [
        {
          "name": "__init__",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "RAGProcessor",
          "line": 22,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "UploadFile"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "langchain.text_splitter",
          "names": [
            "RecursiveCharacterTextSplitter"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "db_manager"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "get_embedding"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "index_document_chunks"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "retrieve_user_memory"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "MemoryErrorHandler"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 91
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 95
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 163
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "security.py": {
      "file": "security.py",
      "lines": 1,
      "functions": [
        {
          "name": "configure_security",
          "line": 91,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "validate_environment",
          "line": 123,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "__init__",
          "line": 37,
          "args": 4,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "SecurityHeadersMiddleware",
          "line": 18,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "RateLimitMiddleware",
          "line": 34,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "RequestLoggingMiddleware",
          "line": 72,
          "methods": 0,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "FastAPI",
            "Request",
            "status"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.middleware.cors",
          "names": [
            "CORSMiddleware"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.middleware.trustedhost",
          "names": [
            "TrustedHostMiddleware"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "starlette.middleware.base",
          "names": [
            "BaseHTTPMiddleware"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "REDIS_HOST",
            "CHROMA_HOST",
            "DEFAULT_MODEL"
          ],
          "line": 125,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "startup.py": {
      "file": "startup.py",
      "lines": 3,
      "functions": [
        {
          "name": "initialize_storage",
          "line": 31,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "initialize_cache_management",
          "line": 39,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "itertools"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any",
            "List"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 15
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "DEFAULT_MODEL",
            "OLLAMA_BASE_URL",
            "log_system_info",
            "log_environment_variables"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.cpu_enforcer",
          "names": [
            "verify_cpu_only_setup",
            "log_cpu_verification_results"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "get_alert_manager"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager",
            "get_database_health"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "model_manager",
          "names": [
            "ensure_model_available"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "routes.models",
          "names": [
            "refresh_model_cache"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "watchdog",
          "names": [
            "start_watchdog_service"
          ],
          "line": 25,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "storage_manager.py": {
      "file": "storage_manager.py",
      "lines": 4,
      "functions": [
        {
          "name": "initialize_storage",
          "line": 202,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "ensure_storage_structure",
          "line": 69,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        },
        {
          "name": "get_storage_info",
          "line": 117,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "validate_permissions",
          "line": 166,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        }
      ],
      "classes": [
        {
          "name": "StorageManager",
          "line": 16,
          "methods": 3,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 9
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 13,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "upload.py": {
      "file": "upload.py",
      "lines": 8,
      "functions": [
        {
          "name": "is_file_type_allowed",
          "line": 39,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 192,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "DocumentUploadJSON",
          "line": 167,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DocumentSearchJSON",
          "line": 172,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "MockUploadFile",
          "line": 191,
          "methods": 1,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 6
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "File"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "Form"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "UploadFile"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel",
            "Field"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "get_user_friendly_message"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "log_error"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_api_request"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "rag",
          "names": [
            "rag_processor"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 111
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 119
        },
        {
          "type": "import",
          "modules": [
            "tempfile"
          ],
          "line": 183
        },
        {
          "type": "import",
          "modules": [
            "io"
          ],
          "line": 184
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "user_profiles.py": {
      "file": "user_profiles.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 13,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "save_user_info",
          "line": 17,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "get_user_info",
          "line": 41,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "update_conversation_context",
          "line": 55,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "extract_user_info",
          "line": 65,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 12
        },
        {
          "name": "get_user_greeting",
          "line": 149,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "build_context_for_llm",
          "line": 175,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        }
      ],
      "classes": [
        {
          "name": "UserProfileManager",
          "line": 12,
          "methods": 7,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 10
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "validation.py": {
      "file": "validation.py",
      "lines": 1,
      "functions": [
        {
          "name": "validate_file_upload",
          "line": 100,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "validate_api_key",
          "line": 123,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "sanitize_output",
          "line": 138,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "check_rate_limit",
          "line": 158,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "log_security_event",
          "line": 164,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "sanitize_strings",
          "line": 18,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "validate_message",
          "line": 42,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "validate_ids",
          "line": 48,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "validate_tags",
          "line": 63,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 7
        },
        {
          "name": "validate_query",
          "line": 84,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "validate_model_name",
          "line": 94,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "ValidationError",
          "line": 10,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "SecureInput",
          "line": 14,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ChatValidation",
          "line": 34,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "DocumentValidation",
          "line": 55,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "SearchValidation",
          "line": 76,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ModelValidation",
          "line": 89,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel",
            "validator",
            "Field"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "HTTPException"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "bleach"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 166,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown",
      "broken_imports": [
        "Line 8: Cannot import 'bleach'"
      ]
    },
    "watchdog.py": {
      "file": "watchdog.py",
      "lines": 2,
      "functions": [
        {
          "name": "get_watchdog",
          "line": 643,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "start_watchdog_service",
          "line": 651,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_system_overview",
          "line": 664,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__post_init__",
          "line": 61,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "__init__",
          "line": 110,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_record_success",
          "line": 121,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_record_failure",
          "line": 127,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "should_alert",
          "line": 131,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 139,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 201,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 306,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 369,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 429,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "_initialize_monitors",
          "line": 449,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_system_status",
          "line": 501,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "get_service_history",
          "line": 533,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_get_adaptive_check_interval",
          "line": 545,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "_store_watchdog_metrics",
          "line": 608,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "start_background_monitoring",
          "line": 628,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "run_monitoring",
          "line": 631,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "HealthStatus",
          "line": 31,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "ServiceHealth",
          "line": 39,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "WatchdogConfig",
          "line": 49,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "SubsystemMonitor",
          "line": 107,
          "methods": 4,
          "has_docstring": true
        },
        {
          "name": "RedisMonitor",
          "line": 136,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "ChromaDBMonitor",
          "line": 198,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "OllamaMonitor",
          "line": 303,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "EmbeddingMonitor",
          "line": 366,
          "methods": 1,
          "has_docstring": true
        },
        {
          "name": "SystemWatchdog",
          "line": 426,
          "methods": 7,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "threading"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "asdict"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "dataclass"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "timedelta"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "enum",
          "names": [
            "Enum"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "chromadb"
          ],
          "line": 23
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 24
        },
        {
          "type": "import",
          "modules": [
            "redis.asyncio"
          ],
          "line": 25
        },
        {
          "type": "from",
          "module": "chromadb.config",
          "names": [
            "Settings"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "db_manager"
          ],
          "line": 28,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "web_search_tool.py": {
      "file": "web_search_tool.py",
      "lines": 8,
      "functions": [
        {
          "name": "format_web_results_for_chat",
          "line": 330,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "should_trigger_web_search",
          "line": 334,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 22,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_parse_search_results",
          "line": 123,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "format_search_results_for_chat",
          "line": 209,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "should_search_web",
          "line": 236,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        }
      ],
      "classes": [
        {
          "name": "WebSearchTool",
          "line": 19,
          "methods": 4,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "aiohttp"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "urllib.parse",
          "names": [
            "quote_plus"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "WEB_SEARCH_TIMEOUT"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 131
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "handlers\\exceptions.py": {
      "file": "handlers\\exceptions.py",
      "lines": 2,
      "functions": [
        {
          "name": "create_exception_handlers",
          "line": 24,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 19,
          "args": 4,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "CustomHTTPException",
          "line": 17,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "uuid"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 5
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Callable",
            "Optional"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "Request"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.exceptions",
          "names": [
            "RequestValidationError"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "starlette.exceptions",
          "names": [
            "HTTPException"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 15,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "handlers\\__init__.py": {
      "file": "handlers\\__init__.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from",
          "module": "exceptions",
          "names": [
            "create_exception_handlers"
          ],
          "line": 4,
          "level": 1
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown",
      "broken_imports": [
        "Line 4: Cannot import from 'exceptions'"
      ]
    },
    "memory\\advanced_memory_pipeline.py": {
      "file": "memory\\advanced_memory_pipeline.py",
      "lines": 4,
      "functions": [
        {
          "name": "__init__",
          "line": 60,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "log",
          "line": 104,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "format_memory_context",
          "line": 207,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "extract_user_id",
          "line": 233,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "get_pipeline_status",
          "line": 361,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Pipeline",
          "line": 36,
          "methods": 5,
          "has_docstring": false
        },
        {
          "name": "Valves",
          "line": 37,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 21
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 22
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 23
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 29
        },
        {
          "type": "import",
          "modules": [
            "subprocess"
          ],
          "line": 31
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 32
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 34
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\backend_memory_pipeline.py": {
      "file": "memory\\backend_memory_pipeline.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 22,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 48,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Pipeline",
          "line": 10,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "Valves",
          "line": 13,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List",
            "Optional",
            "Dict",
            "Any"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 8
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\cross_chat_memory_filter.py": {
      "file": "memory\\cross_chat_memory_filter.py",
      "lines": 2,
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 29,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "inlet",
          "line": 32,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 23
        },
        {
          "name": "outlet",
          "line": 89,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "_extract_user_id",
          "line": 110,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        },
        {
          "name": "_inject_global_memory_context",
          "line": 134,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "_format_global_memory_context",
          "line": 179,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "_store_global_interaction",
          "line": 212,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_store_user_information",
          "line": 248,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "_store_ai_response",
          "line": 293,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 16,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Filter",
          "line": 28,
          "methods": 9,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 12
        },
        {
          "type": "import",
          "modules": [
            "hashlib"
          ],
          "line": 13
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 14
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\memory_filter.py": {
      "file": "memory\\memory_filter.py",
      "lines": 2,
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "inlet",
          "line": 28,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 19
        },
        {
          "name": "outlet",
          "line": 75,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_inject_memory_context",
          "line": 85,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "_format_memory_context",
          "line": 131,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_store_interaction",
          "line": 150,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 14,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Filter",
          "line": 24,
          "methods": 6,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 12
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\memory_pipeline.py": {
      "file": "memory\\memory_pipeline.py",
      "lines": 6,
      "functions": [
        {
          "name": "__init__",
          "line": 55,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_format_memory_context",
          "line": 114,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "Pipeline",
          "line": 36,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "Valves",
          "line": 44,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 21
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 22
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 23
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Any"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 26,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 29
        },
        {
          "type": "import",
          "modules": [
            "subprocess"
          ],
          "line": 31
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 32
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 34
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\openwebui_memory_pipeline.py": {
      "file": "memory\\openwebui_memory_pipeline.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 16,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 27,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 30,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 15,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Function",
          "line": 26,
          "methods": 2,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 12
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\openwebui_memory_pipeline_full.py": {
      "file": "memory\\openwebui_memory_pipeline_full.py",
      "lines": 2,
      "functions": [
        {
          "name": "__init__",
          "line": 18,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 29,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 32,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 19
        },
        {
          "name": "_inject_memory_context",
          "line": 76,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 11
        },
        {
          "name": "_format_memory_context",
          "line": 136,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_store_interaction",
          "line": 155,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 17,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Function",
          "line": 28,
          "methods": 5,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List",
            "Union",
            "Generator",
            "Iterator"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 13
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 14
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "memory\\simple_memory_function.py": {
      "file": "memory\\simple_memory_function.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 9,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 15,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 18,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 8,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Function",
          "line": 14,
          "methods": 2,
          "has_docstring": false
        }
      ],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "pipelines\\pipelines_routes.py": {
      "file": "pipelines\\pipelines_routes.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "pipelines\\pipelines_v1_routes.py": {
      "file": "pipelines\\pipelines_v1_routes.py",
      "lines": 6,
      "functions": [
        {
          "name": "verify_api_key",
          "line": 18,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 5
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter",
            "Body",
            "Depends",
            "HTTPException"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "log_error"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "index_document_chunks",
            "retrieve_user_memory",
            "get_embedding",
            "index_user_document"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 108
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "pipelines\\__init__.py": {
      "file": "pipelines\\__init__.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\chat.py": {
      "file": "routes\\chat.py",
      "lines": 12,
      "functions": [
        {
          "name": "get_cache_manager",
          "line": 31,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "generate_cache_key",
          "line": 38,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "should_store_as_memory",
          "line": 44,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "store_memory",
          "line": 318,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "uuid"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "hashlib"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter",
            "Request",
            "HTTPException"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "DEFAULT_SYSTEM_PROMPT"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager",
            "get_embedding",
            "get_cache",
            "set_cache"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "get_chat_history",
            "get_chat_history_async",
            "store_chat_history",
            "store_chat_history_async",
            "retrieve_user_memory",
            "index_user_document"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "CacheErrorHandler",
            "ChatErrorHandler",
            "MemoryErrorHandler",
            "safe_execute"
          ],
          "line": 20,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 21,
          "level": 0
        },
        {
          "type": "from",
          "module": "models",
          "names": [
            "ChatRequest",
            "ChatResponse"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.llm_service",
          "names": [
            "call_llm"
          ],
          "line": 23,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.tool_service",
          "names": [
            "tool_service"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "user_profiles",
          "names": [
            "user_profile_manager"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "web_search_tool",
          "names": [
            "should_trigger_web_search",
            "search_web",
            "format_web_results_for_chat"
          ],
          "line": 26,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\debug.py": {
      "file": "routes\\debug.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "psutil"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 9
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager"
          ],
          "line": 42,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "config"
          ],
          "line": 103
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\health.py": {
      "file": "routes\\health.py",
      "lines": 1,
      "functions": [
        {
          "name": "get_cache_manager",
          "line": 21,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_watchdog",
          "line": 37,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 31,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "get_service_history",
          "line": 34,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "get_storage_info",
          "line": 48,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "validate_permissions",
          "line": 52,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "MockWatchdog",
          "line": 29,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "StorageManager",
          "line": 45,
          "methods": 2,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 4
        },
        {
          "type": "from",
          "module": "dataclasses",
          "names": [
            "asdict"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi.responses",
          "names": [
            "JSONResponse"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "get_app_start_time"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "get_database_health"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "models",
          "names": [
            "HealthResponse",
            "DetailedHealthResponse"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "get_cache"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager"
          ],
          "line": 251,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 252
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "OLLAMA_BASE_URL",
            "EMBEDDING_MODEL",
            "CHROMA_HOST",
            "CHROMA_PORT"
          ],
          "line": 253,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "get_alert_manager"
          ],
          "line": 221,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\models.py": {
      "file": "routes\\models.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 5
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "OLLAMA_BASE_URL",
            "MODEL_CACHE_TTL"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "models",
          "names": [
            "ModelListResponse",
            "ModelInfo"
          ],
          "line": 13,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\pipeline.py": {
      "file": "routes\\pipeline.py",
      "lines": 1,
      "functions": [],
      "classes": [
        {
          "name": "Pipeline",
          "line": 11,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter",
            "HTTPException"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 7,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\upload.py": {
      "file": "routes\\upload.py",
      "lines": 1,
      "functions": [],
      "classes": [
        {
          "name": "DocumentUpload",
          "line": 19,
          "methods": 0,
          "has_docstring": false
        },
        {
          "name": "DocumentSearch",
          "line": 24,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Optional"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "fastapi",
          "names": [
            "APIRouter",
            "HTTPException",
            "File",
            "Form",
            "UploadFile"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel",
            "Field"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "db_manager",
            "get_embedding"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "database",
          "names": [
            "index_user_document",
            "retrieve_user_memory"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 13,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "routes\\__init__.py": {
      "file": "routes\\__init__.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from",
          "module": "health",
          "names": [
            "health_router"
          ],
          "line": 4,
          "level": 1
        },
        {
          "type": "from",
          "module": "chat",
          "names": [
            "chat_router"
          ],
          "line": 5,
          "level": 1
        },
        {
          "type": "from",
          "module": "models",
          "names": [
            "models_router"
          ],
          "line": 6,
          "level": 1
        },
        {
          "type": "from",
          "module": "upload",
          "names": [
            "upload_router"
          ],
          "line": 7,
          "level": 1
        },
        {
          "type": "from",
          "module": "pipeline",
          "names": [
            "pipeline_router"
          ],
          "line": 8,
          "level": 1
        },
        {
          "type": "from",
          "module": "debug",
          "names": [
            "debug_router"
          ],
          "line": 9,
          "level": 1
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown",
      "broken_imports": [
        "Line 4: Cannot import from 'health'",
        "Line 5: Cannot import from 'chat'",
        "Line 8: Cannot import from 'pipeline'",
        "Line 9: Cannot import from 'debug'"
      ]
    },
    "scripts\\refresh-models.py": {
      "file": "scripts\\refresh-models.py",
      "lines": 3,
      "functions": [
        {
          "name": "sync_refresh",
          "line": 215,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 38,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "ModelRefreshService",
          "line": 35,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "argparse"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 12
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 18
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 22,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "services\\llm_service.py": {
      "file": "services\\llm_service.py",
      "lines": 2,
      "functions": [
        {
          "name": "__init__",
          "line": 22,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "LLMService",
          "line": 19,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "AsyncGenerator",
            "List",
            "Dict",
            "Any",
            "Optional"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "DEFAULT_MODEL",
            "OLLAMA_BASE_URL",
            "USE_OLLAMA",
            "OPENAI_API_BASE_URL",
            "OPENAI_API_KEY",
            "OPENAI_API_MAX_TOKENS",
            "OPENAI_API_TIMEOUT",
            "LLM_TIMEOUT",
            "CONNECTION_TIMEOUT",
            "READ_TIMEOUT",
            "WRITE_TIMEOUT",
            "CONNECTION_POOL_SIZE",
            "MAX_KEEPALIVE_CONNECTIONS"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.streaming_service",
          "names": [
            "STREAM_SESSION_STOP"
          ],
          "line": 170,
          "level": 0
        },
        {
          "type": "from",
          "module": "services.streaming_service",
          "names": [
            "STREAM_SESSION_STOP"
          ],
          "line": 226,
          "level": 0
        },
        {
          "type": "from",
          "module": "config",
          "names": [
            "EMBEDDING_MODEL"
          ],
          "line": 296,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "services\\streaming_service.py": {
      "file": "services\\streaming_service.py",
      "lines": 1,
      "functions": [
        {
          "name": "stop_streaming_session",
          "line": 18,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "cleanup_old_sessions",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "create_session",
          "line": 42,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_session_status",
          "line": 52,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "StreamingService",
          "line": 14,
          "methods": 4,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 5
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 8,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "services\\tool_service.py": {
      "file": "services\\tool_service.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 15,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "detect_and_execute_tool",
          "line": 18,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 13
        },
        {
          "name": "_is_time_query",
          "line": 70,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_is_python_code_query",
          "line": 85,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_execute_time_tool",
          "line": 92,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_execute_weather_tool",
          "line": 139,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_execute_conversion_tool",
          "line": 161,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_execute_search_tool",
          "line": 198,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_execute_news_tool",
          "line": 212,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_execute_exchange_rate_tool",
          "line": 222,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_execute_system_info_tool",
          "line": 240,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_execute_python_tool",
          "line": 250,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_execute_wikipedia_tool",
          "line": 266,
          "args": 5,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_extract_location_from_message",
          "line": 287,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_extract_python_code",
          "line": 314,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_get_time_from_timeanddate",
          "line": 335,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_timezone_time",
          "line": 101,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "ToolService",
          "line": 12,
          "methods": 16,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 5
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Tuple",
            "Optional",
            "List",
            "Dict",
            "Any"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.ai_tools",
          "names": [
            "convert_units",
            "get_current_time",
            "get_weather"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "error_handler",
          "names": [
            "ToolErrorHandler",
            "safe_execute"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 10,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "services\\__init__.py": {
      "file": "services\\__init__.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "from",
          "module": "llm_service",
          "names": [
            "llm_service",
            "call_llm",
            "call_llm_stream"
          ],
          "line": 4,
          "level": 1
        },
        {
          "type": "from",
          "module": "streaming_service",
          "names": [
            "streaming_service",
            "STREAM_SESSION_STOP",
            "STREAM_SESSION_METADATA"
          ],
          "line": 5,
          "level": 1
        },
        {
          "type": "from",
          "module": "tool_service",
          "names": [
            "tool_service"
          ],
          "line": 6,
          "level": 1
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown",
      "broken_imports": [
        "Line 4: Cannot import from 'llm_service'",
        "Line 5: Cannot import from 'streaming_service'",
        "Line 6: Cannot import from 'tool_service'"
      ]
    },
    "tests\\comprehensive_backend_analysis.py": {
      "file": "tests\\comprehensive_backend_analysis.py",
      "lines": 11,
      "functions": [
        {
          "name": "main",
          "line": 447,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "create_markdown_report",
          "line": 518,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "__init__",
          "line": 22,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "log_issue",
          "line": 29,
          "args": 7,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "analyze_python_file",
          "line": 45,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "analyze_ast",
          "line": 82,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "extract_endpoint_info",
          "line": 116,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "extract_import_info",
          "line": 140,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "calculate_complexity",
          "line": 158,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "analyze_lines",
          "line": 169,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 11
        },
        {
          "name": "check_file_imports",
          "line": 206,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "can_import_module",
          "line": 231,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "scan_production_code",
          "line": 239,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "build_endpoint_inventory",
          "line": 276,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "test_live_endpoints",
          "line": 302,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "generate_comprehensive_report",
          "line": 384,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "BackendCodeAnalyzer",
          "line": 21,
          "methods": 14,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "ast"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "importlib.util"
          ],
          "line": 11
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Tuple"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 15
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\comprehensive_code_review.py": {
      "file": "tests\\comprehensive_code_review.py",
      "lines": 5,
      "functions": [
        {
          "name": "main",
          "line": 296,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "__init__",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "log_issue",
          "line": 33,
          "args": 6,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "analyze_python_file",
          "line": 45,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 19
        },
        {
          "name": "check_common_issues",
          "line": 116,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "check_imports",
          "line": 141,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "test_endpoints",
          "line": 165,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "scan_all_files",
          "line": 236,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "generate_report",
          "line": 258,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "CodeQualityReviewer",
          "line": 24,
          "methods": 8,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "ast"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "importlib.util"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 12
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Any",
            "Tuple"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "subprocess"
          ],
          "line": 17
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 18
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\minimal_function.py": {
      "file": "tests\\minimal_function.py",
      "lines": 1,
      "functions": [
        {
          "name": "pipe",
          "line": 2,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Function",
          "line": 1,
          "methods": 1,
          "has_docstring": false
        }
      ],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\pydantic_function.py": {
      "file": "tests\\pydantic_function.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 8,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 11,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Function",
          "line": 4,
          "methods": 2,
          "has_docstring": false
        },
        {
          "name": "Valves",
          "line": 5,
          "methods": 0,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel"
          ],
          "line": 1,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 2,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\review_memory_learning.py": {
      "file": "tests\\review_memory_learning.py",
      "lines": 5,
      "functions": [
        {
          "name": "__init__",
          "line": 18,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "find_memory_learning_files",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        },
        {
          "name": "analyze_memory_functions",
          "line": 46,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "analyze_learning_functions",
          "line": 64,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_analyze_file",
          "line": 80,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_analyze_function",
          "line": 98,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "_has_nested_loops",
          "line": 134,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_has_potential_memory_leak",
          "line": 148,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "_lacks_input_validation",
          "line": 164,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "_lacks_proper_locking",
          "line": 177,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "generate_improvements",
          "line": 189,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_get_memory_pooling_code",
          "line": 255,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_memory_monitoring_code",
          "line": 335,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_hierarchical_memory_code",
          "line": 421,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_learning_rate_code",
          "line": 561,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_reinforcement_learning_code",
          "line": 655,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_meta_learning_code",
          "line": 801,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_hybrid_search_code",
          "line": 972,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_reranking_code",
          "line": 1116,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_get_query_expansion_code",
          "line": 1308,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "generate_report",
          "line": 1518,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "run_review",
          "line": 1536,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "MemoryLearningReviewer",
          "line": 17,
          "methods": 22,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "ast"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Tuple",
            "Any"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 15
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\simple_memory_function.py": {
      "file": "tests\\simple_memory_function.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 9,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 15,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "pipe",
          "line": 18,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "Valves",
          "line": 8,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "Function",
          "line": 14,
          "methods": 2,
          "has_docstring": false
        }
      ],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\validate_alert_integration.py": {
      "file": "tests\\validate_alert_integration.py",
      "lines": 13,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "Any"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "get_alert_manager",
            "AlertSeverity",
            "alert_cache_performance",
            "alert_memory_pressure",
            "alert_service_down"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.cache_manager",
          "names": [
            "CacheManager"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "from",
          "module": "database_manager",
          "names": [
            "initialize_database",
            "get_database_health"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status",
            "init_logging"
          ],
          "line": 20,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "tests\\validate_endpoints.py": {
      "file": "tests\\validate_endpoints.py",
      "lines": 9,
      "functions": [
        {
          "name": "check_file_exists",
          "line": 15,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "extract_endpoints_from_file",
          "line": 19,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "validate_imports_in_file",
          "line": 48,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 11
        },
        {
          "name": "main",
          "line": 98,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 18
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 13,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\ai_tools.py": {
      "file": "utilities\\ai_tools.py",
      "lines": 6,
      "functions": [
        {
          "name": "get_current_time",
          "line": 29,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "get_weather_weatherapi",
          "line": 43,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 6
        },
        {
          "name": "get_weather",
          "line": 69,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 8
        },
        {
          "name": "chunk_text",
          "line": 101,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "convert_units",
          "line": 129,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 13
        },
        {
          "name": "get_time_from_timeanddate",
          "line": 230,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 8
        },
        {
          "name": "wikipedia_search",
          "line": 301,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "run_python_code",
          "line": 340,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        },
        {
          "name": "calculate",
          "line": 424,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "web_search",
          "line": 454,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "get_news",
          "line": 490,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_exchange_rate",
          "line": 510,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "get_system_info",
          "line": 538,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_timezone_for_location",
          "line": 561,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "io"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "math"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "platform"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "urllib.parse"
          ],
          "line": 12
        },
        {
          "type": "from",
          "module": "contextlib",
          "names": [
            "redirect_stderr"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "contextlib",
          "names": [
            "redirect_stdout"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional"
          ],
          "line": 17,
          "level": 0
        },
        {
          "type": "from",
          "module": "zoneinfo",
          "names": [
            "ZoneInfo"
          ],
          "line": 18,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 20
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 22,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "wikipedia"
          ],
          "line": 23
        },
        {
          "type": "from",
          "module": "bs4",
          "names": [
            "BeautifulSoup"
          ],
          "line": 24,
          "level": 0
        },
        {
          "type": "from",
          "module": "langchain.text_splitter",
          "names": [
            "RecursiveCharacterTextSplitter"
          ],
          "line": 25,
          "level": 0
        },
        {
          "type": "from",
          "module": "RestrictedPython",
          "names": [
            "compile_restricted"
          ],
          "line": 26,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\alert_manager.py": {
      "file": "utilities\\alert_manager.py",
      "lines": 4,
      "functions": [
        {
          "name": "get_alert_manager",
          "line": 550,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 52,
          "args": 8,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "to_dict",
          "line": 73,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 93,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "_setup_default_thresholds",
          "line": 104,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_setup_notification_channels",
          "line": 134,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_get_channels_for_severity",
          "line": 239,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 7
        },
        {
          "name": "get_active_alerts",
          "line": 458,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_alert_history",
          "line": 462,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_alert_stats",
          "line": 467,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "_calculate_avg_resolution_time",
          "line": 491,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "_get_top_alerting_components",
          "line": 509,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 26,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 29,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "AlertSeverity",
          "line": 34,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "AlertChannel",
          "line": 41,
          "methods": 0,
          "has_docstring": true
        },
        {
          "name": "Alert",
          "line": 49,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "AlertManager",
          "line": 88,
          "methods": 9,
          "has_docstring": true
        },
        {
          "name": "MimeText",
          "line": 25,
          "methods": 1,
          "has_docstring": false
        },
        {
          "name": "MimeMultipart",
          "line": 28,
          "methods": 1,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "smtplib"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 10
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime",
            "timedelta"
          ],
          "line": 11,
          "level": 0
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Optional",
            "Callable",
            "Any"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "from",
          "module": "enum",
          "names": [
            "Enum"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 15
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 16
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 32,
          "level": 0
        },
        {
          "type": "from",
          "module": "email.mime.text",
          "names": [
            "MimeText"
          ],
          "line": 19,
          "level": 0
        },
        {
          "type": "from",
          "module": "email.mime.multipart",
          "names": [
            "MimeMultipart"
          ],
          "line": 20,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\api_key_manager.py": {
      "file": "utilities\\api_key_manager.py",
      "lines": 4,
      "functions": [
        {
          "name": "setup_api_keys_interactive",
          "line": 268,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 23
        },
        {
          "name": "__init__",
          "line": 15,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_load_keys",
          "line": 25,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "_create_empty_config",
          "line": 37,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "save_keys",
          "line": 58,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "add_user_key",
          "line": 73,
          "args": 6,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "add_environment_key",
          "line": 96,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "set_default_key",
          "line": 114,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_key_by_user",
          "line": 134,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_key_by_environment",
          "line": 146,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_default_key",
          "line": 158,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "get_key",
          "line": 170,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "list_users",
          "line": 218,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "list_environments",
          "line": 222,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "remove_user",
          "line": 226,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "remove_environment",
          "line": 233,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "validate_key",
          "line": 240,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "APIKeyManager",
          "line": 12,
          "methods": 16,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Optional",
            "Dict",
            "Any"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 252
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\cache_manager.py": {
      "file": "utilities\\cache_manager.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 31,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get",
          "line": 42,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "set",
          "line": 68,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "remove",
          "line": 82,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "clear",
          "line": 88,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_size",
          "line": 97,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_stats",
          "line": 101,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_trigger_performance_check",
          "line": 132,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "log_service_status",
          "line": 15,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "CacheManager",
          "line": 28,
          "methods": 8,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Generic",
            "TypeVar",
            "Dict",
            "Optional",
            "Any"
          ],
          "line": 2,
          "level": 0
        },
        {
          "type": "from",
          "module": "collections",
          "names": [
            "OrderedDict"
          ],
          "line": 3,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 6
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 7
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.alert_manager",
          "names": [
            "alert_cache_performance"
          ],
          "line": 20,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\cpu_enforcer.py": {
      "file": "utilities\\cpu_enforcer.py",
      "lines": 1,
      "functions": [
        {
          "name": "enforce_cpu_only_mode",
          "line": 13,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "verify_cpu_only_setup",
          "line": 31,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 15
        },
        {
          "name": "log_cpu_verification_results",
          "line": 116,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "torch"
          ],
          "line": 59
        },
        {
          "type": "from",
          "module": "sentence_transformers",
          "names": [
            "SentenceTransformer"
          ],
          "line": 77,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "tempfile"
          ],
          "line": 78
        },
        {
          "type": "import",
          "modules": [
            "torch"
          ],
          "line": 79
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\database_types.py": {
      "file": "utilities\\database_types.py",
      "lines": 1,
      "functions": [
        {
          "name": "connect",
          "line": 12,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "disconnect",
          "line": 16,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "is_connected",
          "line": 20,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 27,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "get",
          "line": 32,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "set",
          "line": 39,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "clear",
          "line": 53,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 61,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "connect",
          "line": 66,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "disconnect",
          "line": 74,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "is_connected",
          "line": 80,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "get_or_create_collection",
          "line": 84,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "list_collections",
          "line": 101,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        }
      ],
      "classes": [
        {
          "name": "DatabaseClient",
          "line": 10,
          "methods": 3,
          "has_docstring": true
        },
        {
          "name": "CacheManager",
          "line": 24,
          "methods": 4,
          "has_docstring": true
        },
        {
          "name": "ChromaDBClient",
          "line": 58,
          "methods": 6,
          "has_docstring": true
        },
        {
          "name": "DatabaseManagerTypes",
          "line": 108,
          "methods": 0,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Protocol",
            "Optional",
            "Any",
            "Dict",
            "List",
            "TypeVar",
            "Generic"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "chromadb"
          ],
          "line": 6
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\endpoint_validator.py": {
      "file": "utilities\\endpoint_validator.py",
      "lines": 13,
      "functions": [
        {
          "name": "main",
          "line": 338,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 27,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "scan_project_files",
          "line": 34,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "extract_endpoints_from_file",
          "line": 49,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 12
        },
        {
          "name": "extract_all_endpoints",
          "line": 88,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 3
        },
        {
          "name": "get_live_routes",
          "line": 104,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "test_endpoint_response",
          "line": 135,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 14
        },
        {
          "name": "cross_reference_endpoints",
          "line": 197,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 5
        },
        {
          "name": "test_all_endpoints",
          "line": 232,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "generate_report",
          "line": 254,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        }
      ],
      "classes": [
        {
          "name": "EndpointValidator",
          "line": 26,
          "methods": 9,
          "has_docstring": false
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "ast"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 12
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "List",
            "Set",
            "Tuple"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "main",
          "names": [
            "app"
          ],
          "line": 111,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\focused_endpoint_validator.py": {
      "file": "utilities\\focused_endpoint_validator.py",
      "lines": 6,
      "functions": [
        {
          "name": "print_section",
          "line": 23,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "test_endpoint",
          "line": 28,
          "args": 4,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        },
        {
          "name": "get_routes_from_app",
          "line": 51,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 9
        },
        {
          "name": "find_endpoint_definitions",
          "line": 71,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 6
        },
        {
          "name": "main",
          "line": 100,
          "args": 0,
          "is_async": false,
          "has_docstring": false,
          "complexity": 18
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "ast"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 11
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 12,
          "level": 0
        },
        {
          "type": "from",
          "module": "main",
          "names": [
            "app"
          ],
          "line": 54,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 264
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 88
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\force_refresh.py": {
      "file": "utilities\\force_refresh.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 1
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 2
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 3
        },
        {
          "type": "from",
          "module": "model_manager",
          "names": [
            "_model_cache"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "model_manager",
          "names": [
            "refresh_model_cache"
          ],
          "line": 6,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\inspect_chromadb.py": {
      "file": "utilities\\inspect_chromadb.py",
      "lines": 5,
      "functions": [
        {
          "name": "inspect_chromadb_collection",
          "line": 14,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 10
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "requests"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 8
        },
        {
          "type": "import",
          "modules": [
            "time"
          ],
          "line": 9
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\memory_monitor.py": {
      "file": "utilities\\memory_monitor.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 17,
          "args": 4,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "register_cleanup_callback",
          "line": 58,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_get_memory_info",
          "line": 80,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "_analyze_trends",
          "line": 190,
          "args": 2,
          "is_async": false,
          "has_docstring": true,
          "complexity": 4
        }
      ],
      "classes": [
        {
          "name": "MemoryPressureMonitor",
          "line": 14,
          "methods": 4,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 4
        },
        {
          "type": "import",
          "modules": [
            "psutil"
          ],
          "line": 5
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 6
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Callable",
            "List",
            "Optional"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 8,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "json"
          ],
          "line": 9
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 10,
          "level": 0
        },
        {
          "type": "from",
          "module": "human_logging",
          "names": [
            "log_service_status"
          ],
          "line": 12,
          "level": 0
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\memory_pool.py": {
      "file": "utilities\\memory_pool.py",
      "lines": 1,
      "functions": [
        {
          "name": "__init__",
          "line": 12,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "clear",
          "line": 18,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        },
        {
          "name": "__init__",
          "line": 28,
          "args": 3,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        },
        {
          "name": "get_stats",
          "line": 118,
          "args": 1,
          "is_async": false,
          "has_docstring": true,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "MemoryObject",
          "line": 10,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "MemoryPool",
          "line": 25,
          "methods": 2,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 4
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict",
            "Any",
            "Optional",
            "List"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 6,
          "level": 0
        },
        {
          "type": "from",
          "module": "collections",
          "names": [
            "deque"
          ],
          "line": 7,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "weakref"
          ],
          "line": 8
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\refresh-models.py": {
      "file": "utilities\\refresh-models.py",
      "lines": 3,
      "functions": [
        {
          "name": "sync_refresh",
          "line": 208,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 2
        },
        {
          "name": "__init__",
          "line": 34,
          "args": 1,
          "is_async": false,
          "has_docstring": false,
          "complexity": 1
        }
      ],
      "classes": [
        {
          "name": "ModelRefreshService",
          "line": 31,
          "methods": 1,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "import",
          "modules": [
            "argparse"
          ],
          "line": 9
        },
        {
          "type": "import",
          "modules": [
            "asyncio"
          ],
          "line": 10
        },
        {
          "type": "import",
          "modules": [
            "logging"
          ],
          "line": 11
        },
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 12
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 13
        },
        {
          "type": "from",
          "module": "datetime",
          "names": [
            "datetime"
          ],
          "line": 14,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Dict"
          ],
          "line": 15,
          "level": 0
        },
        {
          "type": "from",
          "module": "typing",
          "names": [
            "List"
          ],
          "line": 16,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "httpx"
          ],
          "line": 18
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\setup_api_keys_demo.py": {
      "file": "utilities\\setup_api_keys_demo.py",
      "lines": 10,
      "functions": [
        {
          "name": "demo_api_key_setup",
          "line": 16,
          "args": 0,
          "is_async": false,
          "has_docstring": true,
          "complexity": 14
        }
      ],
      "classes": [],
      "imports": [
        {
          "type": "import",
          "modules": [
            "os"
          ],
          "line": 7
        },
        {
          "type": "import",
          "modules": [
            "sys"
          ],
          "line": 8
        },
        {
          "type": "from",
          "module": "pathlib",
          "names": [
            "Path"
          ],
          "line": 9,
          "level": 0
        },
        {
          "type": "from",
          "module": "utilities.api_key_manager",
          "names": [
            "APIKeyManager"
          ],
          "line": 13,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "traceback"
          ],
          "line": 142
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\validation.py": {
      "file": "utilities\\validation.py",
      "lines": 1,
      "functions": [
        {
          "name": "validate_query_params",
          "line": 53,
          "args": 3,
          "is_async": false,
          "has_docstring": true,
          "complexity": 11
        },
        {
          "name": "validate_port",
          "line": 16,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        },
        {
          "name": "validate_host",
          "line": 22,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 5
        },
        {
          "name": "validate_content",
          "line": 37,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 4
        },
        {
          "name": "validate_metadata",
          "line": 45,
          "args": 2,
          "is_async": false,
          "has_docstring": false,
          "complexity": 3
        }
      ],
      "classes": [
        {
          "name": "DatabaseConfig",
          "line": 8,
          "methods": 2,
          "has_docstring": true
        },
        {
          "name": "ChatMessage",
          "line": 30,
          "methods": 2,
          "has_docstring": true
        }
      ],
      "imports": [
        {
          "type": "from",
          "module": "typing",
          "names": [
            "Any",
            "Dict",
            "List",
            "Optional",
            "Union"
          ],
          "line": 4,
          "level": 0
        },
        {
          "type": "from",
          "module": "pydantic",
          "names": [
            "BaseModel",
            "validator"
          ],
          "line": 5,
          "level": 0
        },
        {
          "type": "import",
          "modules": [
            "re"
          ],
          "line": 6
        }
      ],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "utilities\\__init__.py": {
      "file": "utilities\\__init__.py",
      "lines": 1,
      "functions": [],
      "classes": [],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    },
    "storage\\openwebui\\cache\\embedding\\models\\models--sentence-transformers--all-MiniLM-L6-v2\\snapshots\\c9745ed1d9f207416be6d2e6f8de32d1f16199bf\\train_script.py": {
      "file": "storage\\openwebui\\cache\\embedding\\models\\models--sentence-transformers--all-MiniLM-L6-v2\\snapshots\\c9745ed1d9f207416be6d2e6f8de32d1f16199bf\\train_script.py",
      "lines": 0,
      "functions": [],
      "classes": [],
      "imports": [],
      "endpoints": [],
      "complexity_score": 0,
      "docstring_coverage": 0,
      "test_coverage": "unknown"
    }
  },
  "detailed_issues": [
    {
      "category": "style",
      "severity": "warning",
      "file": "adaptive_learning.py",
      "line": 1,
      "message": "Very long line (16759 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.254900"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "adaptive_learning.py",
      "line": 2,
      "message": "Very long line (372 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.255900"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "adaptive_learning.py",
      "line": 3,
      "message": "Very long line (5215 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.255900"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "cache_manager.py",
      "line": 1,
      "message": "Very long line (9565 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.258224"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "config.py",
      "line": 1,
      "message": "Very long line (4765 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.260334"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "database.py",
      "line": 1,
      "message": "Very long line (15901 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.264377"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "database_manager.py",
      "line": 1,
      "message": "Very long line (47114 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:24.275313"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 1,
      "message": "Very long line (9262 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.011687"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 1,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:25.011687"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 3,
      "message": "Very long line (2976 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.011687"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 3,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:25.011687"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 6,
      "message": "Very long line (206 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.011687"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 9,
      "message": "Very long line (205 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 18,
      "message": "Very long line (4235 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 20,
      "message": "Very long line (494 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 22,
      "message": "Very long line (342 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 23,
      "message": "Very long line (695 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 25,
      "message": "Very long line (707 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 27,
      "message": "Very long line (1288 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 28,
      "message": "Very long line (204 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 31,
      "message": "Very long line (634 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 31,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:25.012686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_document_processing.py",
      "line": 36,
      "message": "Very long line (3726 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.013687"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_integration.py",
      "line": 1,
      "message": "Very long line (13827 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.015686"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "enhanced_streaming.py",
      "line": 1,
      "message": "Very long line (11367 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.017281"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "error_handler.py",
      "line": 1,
      "message": "Very long line (9240 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.020189"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "feedback_router.py",
      "line": 1,
      "message": "Very long line (3218 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.020189"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "human_logging.py",
      "line": 1,
      "message": "Very long line (6304 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.023266"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "main.py",
      "line": 1,
      "message": "Very long line (12670 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.025813"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "main.py",
      "line": 3,
      "message": "Very long line (1750 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.026812"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "main.py",
      "line": 7,
      "message": "Very long line (753 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.026812"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "main.py",
      "line": 11,
      "message": "Very long line (7216 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.027343"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "models.py",
      "line": 1,
      "message": "Very long line (4305 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.030299"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "model_manager.py",
      "line": 1,
      "message": "Very long line (8170 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.031848"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 1,
      "message": "Very long line (952 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 4,
      "message": "Very long line (2428 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 5,
      "message": "Very long line (277 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 6,
      "message": "Very long line (283 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 7,
      "message": "Very long line (360 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 8,
      "message": "Very long line (1116 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 9,
      "message": "Very long line (258 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 10,
      "message": "Very long line (405 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.033404"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 11,
      "message": "Very long line (627 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.034954"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "rag.py",
      "line": 16,
      "message": "Very long line (198 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.034954"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "security.py",
      "line": 1,
      "message": "Very long line (5461 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.036471"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "startup.py",
      "line": 1,
      "message": "Very long line (2836 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.038504"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "startup.py",
      "line": 2,
      "message": "Very long line (251 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.038504"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "startup.py",
      "line": 3,
      "message": "Very long line (8002 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:25.039503"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "storage_manager.py",
      "line": 1,
      "message": "Very long line (8328 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.710904"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "storage_manager.py",
      "line": 3,
      "message": "Very long line (458 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.710904"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "storage_manager.py",
      "line": 4,
      "message": "Very long line (199 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.710904"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 1,
      "message": "Very long line (3657 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.712455"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 2,
      "message": "Very long line (354 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.712960"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 5,
      "message": "Very long line (344 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.712960"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 6,
      "message": "Very long line (254 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.712960"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 7,
      "message": "Very long line (745 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.713648"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "upload.py",
      "line": 8,
      "message": "Very long line (2842 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.713648"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "user_profiles.py",
      "line": 1,
      "message": "Very long line (7064 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.715712"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "validation.py",
      "line": 1,
      "message": "Very long line (6353 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.716735"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "validation.py",
      "line": 1,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.716735"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "validation.py",
      "line": 8,
      "message": "Cannot import 'bleach'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.718073"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "watchdog.py",
      "line": 1,
      "message": "Very long line (24573 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.722731"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "watchdog.py",
      "line": 2,
      "message": "Very long line (713 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.722731"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "web_search_tool.py",
      "line": 1,
      "message": "Very long line (9430 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.726311"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "web_search_tool.py",
      "line": 8,
      "message": "Very long line (4654 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.726311"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "web_search_tool.py",
      "line": 8,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.726311"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "handlers\\exceptions.py",
      "line": 1,
      "message": "Very long line (5509 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.727417"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "handlers\\exceptions.py",
      "line": 2,
      "message": "Very long line (658 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.727417"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "handlers\\__init__.py",
      "line": 4,
      "message": "Cannot import from 'exceptions'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.728662"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\advanced_memory_pipeline.py",
      "line": 1,
      "message": "Very long line (9506 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.731222"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\advanced_memory_pipeline.py",
      "line": 2,
      "message": "Very long line (2049 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.731744"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\advanced_memory_pipeline.py",
      "line": 4,
      "message": "Very long line (4347 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.731744"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\backend_memory_pipeline.py",
      "line": 1,
      "message": "Very long line (6599 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.733511"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\cross_chat_memory_filter.py",
      "line": 1,
      "message": "Very long line (8837 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.736434"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\cross_chat_memory_filter.py",
      "line": 2,
      "message": "Very long line (5021 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.736434"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_filter.py",
      "line": 1,
      "message": "Very long line (5974 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.738514"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_filter.py",
      "line": 2,
      "message": "Very long line (1346 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.739021"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "memory\\memory_filter.py",
      "line": 2,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.739021"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_pipeline.py",
      "line": 1,
      "message": "Very long line (4370 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.740933"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_pipeline.py",
      "line": 3,
      "message": "Very long line (4719 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.740933"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_pipeline.py",
      "line": 5,
      "message": "Very long line (2027 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.741436"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\memory_pipeline.py",
      "line": 6,
      "message": "Very long line (685 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.741436"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\openwebui_memory_pipeline.py",
      "line": 1,
      "message": "Very long line (1203 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.742475"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\openwebui_memory_pipeline_full.py",
      "line": 1,
      "message": "Very long line (5937 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.744348"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\openwebui_memory_pipeline_full.py",
      "line": 2,
      "message": "Very long line (1360 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.744348"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "memory\\openwebui_memory_pipeline_full.py",
      "line": 2,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.744869"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "memory\\simple_memory_function.py",
      "line": 1,
      "message": "Very long line (672 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.744869"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "memory\\simple_memory_function.py",
      "line": 1,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.745636"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "pipelines\\pipelines_v1_routes.py",
      "line": 1,
      "message": "Very long line (5306 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.747177"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "pipelines\\pipelines_v1_routes.py",
      "line": 2,
      "message": "Very long line (176 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.747177"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "pipelines\\pipelines_v1_routes.py",
      "line": 5,
      "message": "Very long line (1888 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.747177"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "pipelines\\pipelines_v1_routes.py",
      "line": 6,
      "message": "Very long line (1518 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.747698"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\chat.py",
      "line": 1,
      "message": "Very long line (9706 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.751283"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\chat.py",
      "line": 3,
      "message": "Very long line (200 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.751283"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\chat.py",
      "line": 9,
      "message": "Very long line (2542 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.751283"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\chat.py",
      "line": 11,
      "message": "Very long line (2898 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.751283"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\chat.py",
      "line": 12,
      "message": "Very long line (2705 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.751283"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\debug.py",
      "line": 1,
      "message": "Very long line (4995 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.752791"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\health.py",
      "line": 1,
      "message": "Very long line (11592 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.754341"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\models.py",
      "line": 1,
      "message": "Very long line (5144 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.756463"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\pipeline.py",
      "line": 1,
      "message": "Very long line (1760 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.756996"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\upload.py",
      "line": 1,
      "message": "Very long line (9280 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.759044"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "routes\\__init__.py",
      "line": 1,
      "message": "Very long line (362 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.759566"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "routes\\__init__.py",
      "line": 4,
      "message": "Cannot import from 'health'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.760088"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "routes\\__init__.py",
      "line": 5,
      "message": "Cannot import from 'chat'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.760088"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "routes\\__init__.py",
      "line": 8,
      "message": "Cannot import from 'pipeline'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.760598"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "routes\\__init__.py",
      "line": 9,
      "message": "Cannot import from 'debug'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.761118"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "scripts\\refresh-models.py",
      "line": 1,
      "message": "Very long line (7837 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.762672"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "scripts\\refresh-models.py",
      "line": 2,
      "message": "Very long line (509 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.763190"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "scripts\\refresh-models.py",
      "line": 3,
      "message": "Very long line (483 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.763190"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "services\\llm_service.py",
      "line": 1,
      "message": "Very long line (7256 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.765809"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "services\\llm_service.py",
      "line": 2,
      "message": "Very long line (7936 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.765809"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "services\\streaming_service.py",
      "line": 1,
      "message": "Very long line (2786 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.766815"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "services\\tool_service.py",
      "line": 1,
      "message": "Very long line (14561 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.770520"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "services\\__init__.py",
      "line": 1,
      "message": "Very long line (406 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.771029"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "services\\__init__.py",
      "line": 4,
      "message": "Cannot import from 'llm_service'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.771546"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "services\\__init__.py",
      "line": 5,
      "message": "Cannot import from 'streaming_service'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.772060"
    },
    {
      "category": "imports",
      "severity": "error",
      "file": "services\\__init__.py",
      "line": 6,
      "message": "Cannot import from 'tool_service'",
      "suggestion": "Check if module exists or update import path",
      "timestamp": "2025-06-26T21:15:28.772565"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 1,
      "message": "Very long line (2035 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.778342"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 2,
      "message": "Very long line (11071 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.778342"
    },
    {
      "category": "maintenance",
      "severity": "info",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 2,
      "message": "Maintenance comment: ')\n                analysis['lines'] = len(lines)\n...",
      "suggestion": "Address technical debt when possible",
      "timestamp": "2025-06-26T21:15:28.778342"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 3,
      "message": "Very long line (6660 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.778852"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 4,
      "message": "Very long line (913 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779370"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 5,
      "message": "Very long line (410 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779370"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 6,
      "message": "Very long line (470 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779370"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 6,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.779884"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 7,
      "message": "Very long line (1339 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779884"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 9,
      "message": "Very long line (195 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779884"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 11,
      "message": "Very long line (1316 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.779884"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\comprehensive_backend_analysis.py",
      "line": 11,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.780477"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_code_review.py",
      "line": 1,
      "message": "Very long line (1715 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.784129"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_code_review.py",
      "line": 2,
      "message": "Very long line (6170 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.784129"
    },
    {
      "category": "maintenance",
      "severity": "info",
      "file": "tests\\comprehensive_code_review.py",
      "line": 2,
      "message": "Maintenance comment: ')\n                analysis['lines'] = len(lines)\n...",
      "suggestion": "Address technical debt when possible",
      "timestamp": "2025-06-26T21:15:28.784129"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_code_review.py",
      "line": 3,
      "message": "Very long line (5149 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.784653"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_code_review.py",
      "line": 4,
      "message": "Very long line (1076 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.784653"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\comprehensive_code_review.py",
      "line": 5,
      "message": "Very long line (158 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.784653"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\pydantic_function.py",
      "line": 1,
      "message": "Very long line (298 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.785770"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\review_memory_learning.py",
      "line": 1,
      "message": "Very long line (1900 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.788744"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\review_memory_learning.py",
      "line": 2,
      "message": "Very long line (642 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.789264"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\review_memory_learning.py",
      "line": 2,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.789264"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\review_memory_learning.py",
      "line": 3,
      "message": "Very long line (55989 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.789264"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\review_memory_learning.py",
      "line": 5,
      "message": "Very long line (443 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.791305"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\simple_memory_function.py",
      "line": 1,
      "message": "Very long line (672 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.792329"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\simple_memory_function.py",
      "line": 1,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.792329"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 1,
      "message": "Very long line (1923 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.794359"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 2,
      "message": "Very long line (1265 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.794880"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 3,
      "message": "Very long line (818 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.794880"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 4,
      "message": "Very long line (829 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 5,
      "message": "Very long line (1229 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 6,
      "message": "Very long line (1335 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 7,
      "message": "Very long line (862 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 8,
      "message": "Very long line (190 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 9,
      "message": "Very long line (310 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 10,
      "message": "Very long line (1603 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 11,
      "message": "Very long line (427 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\validate_alert_integration.py",
      "line": 11,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.795456"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 1,
      "message": "Very long line (3908 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.798497"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 2,
      "message": "Very long line (682 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.798497"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 3,
      "message": "Very long line (406 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799018"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 3,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.799018"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 4,
      "message": "Very long line (203 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799018"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 5,
      "message": "Very long line (481 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799529"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 6,
      "message": "Very long line (157 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799529"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 7,
      "message": "Very long line (335 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799529"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 8,
      "message": "Very long line (317 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799529"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "tests\\validate_endpoints.py",
      "line": 9,
      "message": "Very long line (430 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.799529"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\ai_tools.py",
      "line": 1,
      "message": "Very long line (4464 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.803638"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\ai_tools.py",
      "line": 4,
      "message": "Very long line (7292 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.803638"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\ai_tools.py",
      "line": 5,
      "message": "Very long line (256 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.803638"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\ai_tools.py",
      "line": 6,
      "message": "Very long line (7732 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.803638"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\alert_manager.py",
      "line": 1,
      "message": "Very long line (12649 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.808299"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\alert_manager.py",
      "line": 3,
      "message": "Very long line (2627 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.809812"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\alert_manager.py",
      "line": 4,
      "message": "Very long line (8612 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.809812"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\api_key_manager.py",
      "line": 1,
      "message": "Very long line (9394 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.813391"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\api_key_manager.py",
      "line": 2,
      "message": "Very long line (268 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.813923"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\api_key_manager.py",
      "line": 3,
      "message": "Very long line (1759 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.813923"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\api_key_manager.py",
      "line": 4,
      "message": "Very long line (1516 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.814431"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\cache_manager.py",
      "line": 1,
      "message": "Very long line (5583 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.815771"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\cpu_enforcer.py",
      "line": 1,
      "message": "Very long line (5620 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.817768"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\database_types.py",
      "line": 1,
      "message": "Very long line (3537 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.818813"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 1,
      "message": "Very long line (8754 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.822570"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 2,
      "message": "Very long line (171 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823108"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 3,
      "message": "Very long line (1173 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823108"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 3,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 5,
      "message": "Very long line (198 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 6,
      "message": "Very long line (668 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 7,
      "message": "Very long line (352 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 8,
      "message": "Very long line (803 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 9,
      "message": "Very long line (383 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 9,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 10,
      "message": "Very long line (740 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.823629"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\endpoint_validator.py",
      "line": 11,
      "message": "Very long line (1516 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.824494"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\focused_endpoint_validator.py",
      "line": 1,
      "message": "Very long line (479 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.827170"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\focused_endpoint_validator.py",
      "line": 2,
      "message": "Very long line (5851 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.827170"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\focused_endpoint_validator.py",
      "line": 3,
      "message": "Very long line (389 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.827170"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\focused_endpoint_validator.py",
      "line": 4,
      "message": "Very long line (1973 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.827672"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\force_refresh.py",
      "line": 1,
      "message": "Very long line (493 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.828181"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\inspect_chromadb.py",
      "line": 1,
      "message": "Very long line (1594 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.830219"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\inspect_chromadb.py",
      "line": 3,
      "message": "Very long line (157 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.830219"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "utilities\\inspect_chromadb.py",
      "line": 3,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.830219"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\inspect_chromadb.py",
      "line": 4,
      "message": "Very long line (1428 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.830219"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\inspect_chromadb.py",
      "line": 5,
      "message": "Very long line (855 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.830739"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\memory_monitor.py",
      "line": 1,
      "message": "Very long line (7646 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.832065"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\memory_pool.py",
      "line": 1,
      "message": "Very long line (4578 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.833609"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\refresh-models.py",
      "line": 1,
      "message": "Very long line (7388 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.835204"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\refresh-models.py",
      "line": 2,
      "message": "Very long line (509 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.835204"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\refresh-models.py",
      "line": 3,
      "message": "Very long line (483 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.835707"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 1,
      "message": "Very long line (1317 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.836764"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 2,
      "message": "Very long line (369 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837292"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 3,
      "message": "Very long line (866 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837292"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 5,
      "message": "Very long line (173 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837292"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 6,
      "message": "Very long line (207 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 7,
      "message": "Very long line (757 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "security",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 7,
      "message": "Potential hardcoded credential",
      "suggestion": "Use environment variables for secrets",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 8,
      "message": "Very long line (1045 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 9,
      "message": "Very long line (415 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\setup_api_keys_demo.py",
      "line": 10,
      "message": "Very long line (153 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.837811"
    },
    {
      "category": "style",
      "severity": "warning",
      "file": "utilities\\validation.py",
      "line": 1,
      "message": "Very long line (2474 chars)",
      "suggestion": "Consider breaking into multiple lines",
      "timestamp": "2025-06-26T21:15:28.839357"
    },
    {
      "category": "file_access",
      "severity": "error",
      "file": "storage\\openwebui\\cache\\embedding\\models\\models--sentence-transformers--all-MiniLM-L6-v2\\snapshots\\c9745ed1d9f207416be6d2e6f8de32d1f16199bf\\train_script.py",
      "line": 0,
      "message": "Cannot read file: [Errno 22] Invalid argument: 'E:\\\\Projects\\\\opt\\\\backend\\\\storage\\\\openwebui\\\\cache\\\\embedding\\\\models\\\\models--sentence-transformers--all-MiniLM-L6-v2\\\\snapshots\\\\c9745ed1d9f207416be6d2e6f8de32d1f16199bf\\\\train_script.py'",
      "suggestion": "Check file permissions and encoding",
      "timestamp": "2025-06-26T21:15:28.839866"
    }
  ],
  "endpoint_test_results": {
    "tested": 0,
    "passed": 0,
    "failed": 0,
    "skipped": 0,
    "results": []
  }
}