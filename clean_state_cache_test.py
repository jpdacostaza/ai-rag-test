"""
Comprehensive Cache Test from Clean State
Tests cache functionality after complete flush
"""
import requests
import time
import hashlib

BASE_URL = "http://localhost:9099"

def generate_cache_key(user_id: str, message: str) -> str:
    """Generate the same cache key as the backend."""
    message_hash = hashlib.md5(message.encode()).hexdigest()[:8]
    return f"chat:{user_id}:{message_hash}"

def fresh_cache_test():
    """Test cache functionality from a completely clean state"""
    print("üß™ Comprehensive Cache Test from Clean State")
    print("=" * 70)
    
    # 1. Verify clean state
    print("1Ô∏è‚É£ Verifying Clean State...")
    initial_stats = requests.get(f"{BASE_URL}/debug/cache").json()
    print(f"   üìä Initial cache: {initial_stats['hit_count']} hits, {initial_stats['miss_count']} misses, {initial_stats['total_requests']} total")
    
    if initial_stats['total_requests'] == 0:
        print("   ‚úÖ Cache is completely clean - perfect starting point")
    else:
        print("   ‚ö†Ô∏è  Cache not completely clean, but proceeding...")
    
    # 2. First request (guaranteed cache miss)
    print("\n2Ô∏è‚É£ First Request (Expected Cache Miss)...")
    
    test_payload = {
        "user_id": "clean_test_user_001",
        "message": "What is the capital of France?",
        "model": "llama3.2:3b"
    }
    
    expected_key = generate_cache_key(test_payload["user_id"], test_payload["message"])
    print(f"   üîë Expected cache key: {expected_key}")
    
    start1 = time.time()
    try:
        response1 = requests.post(f"{BASE_URL}/chat", json=test_payload, timeout=45)
        time1 = (time.time() - start1) * 1000
        
        if response1.status_code == 200:
            result1 = response1.json()['response']
            print(f"   ‚úÖ First request: {response1.status_code} - {time1:.2f}ms")
            print(f"   üìù Response: {result1[:60]}...")
            
            # Check cache stats after first request
            stats_after_first = requests.get(f"{BASE_URL}/debug/cache").json()
            print(f"   üìä After first: {stats_after_first['hit_count']} hits, {stats_after_first['miss_count']} misses")
            
            if stats_after_first['miss_count'] == 1 and stats_after_first['hit_count'] == 0:
                print("   ‚úÖ Cache miss recorded correctly")
            else:
                print("   ‚ö†Ô∏è  Unexpected cache stats after first request")
        else:
            print(f"   ‚ùå First request failed: {response1.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå First request error: {e}")
        return False
    
    # 3. Second request - same user, same message (expected cache hit)
    print("\n3Ô∏è‚É£ Second Request (Expected Cache Hit)...")
    
    start2 = time.time()
    try:
        response2 = requests.post(f"{BASE_URL}/chat", json=test_payload, timeout=45)
        time2 = (time.time() - start2) * 1000
        
        if response2.status_code == 200:
            result2 = response2.json()['response']
            print(f"   ‚úÖ Second request: {response2.status_code} - {time2:.2f}ms")
            print(f"   üìù Response: {result2[:60]}...")
            
            # Check cache stats after second request
            stats_after_second = requests.get(f"{BASE_URL}/debug/cache").json()
            print(f"   üìä After second: {stats_after_second['hit_count']} hits, {stats_after_second['miss_count']} misses")
            
            # Verify cache hit
            if stats_after_second['hit_count'] == 1:
                print("   ‚úÖ Cache hit recorded correctly!")
                
                # Verify response consistency
                if result1.strip() == result2.strip():
                    print("   ‚úÖ Responses are identical (cache working)")
                else:
                    print("   ‚ö†Ô∏è  Responses differ (potential cache issue)")
                
                # Verify speed improvement
                speed_improvement = time1 / time2 if time2 > 0 else float('inf')
                print(f"   üöÄ Speed improvement: {speed_improvement:.1f}x faster ({time1:.0f}ms ‚Üí {time2:.0f}ms)")
                
                if speed_improvement > 10:
                    print("   ‚úÖ Excellent speed improvement from caching!")
                elif speed_improvement > 2:
                    print("   ‚úÖ Good speed improvement from caching")
                else:
                    print("   ‚ö†Ô∏è  Limited speed improvement")
            else:
                print("   ‚ùå Cache hit NOT recorded - cache may not be working")
                return False
        else:
            print(f"   ‚ùå Second request failed: {response2.status_code}")
            return False
    except Exception as e:
        print(f"   ‚ùå Second request error: {e}")
        return False
    
    # 4. Third request - different user, same message (expected cache miss)
    print("\n4Ô∏è‚É£ Third Request - Different User (Expected Cache Miss)...")
    
    different_user_payload = {
        "user_id": "clean_test_user_002",  # Different user
        "message": "What is the capital of France?",  # Same message
        "model": "llama3.2:3b"
    }
    
    start3 = time.time()
    try:
        response3 = requests.post(f"{BASE_URL}/chat", json=different_user_payload, timeout=45)
        time3 = (time.time() - start3) * 1000
        
        if response3.status_code == 200:
            print(f"   ‚úÖ Third request: {response3.status_code} - {time3:.2f}ms")
            
            # Check cache stats
            stats_after_third = requests.get(f"{BASE_URL}/debug/cache").json()
            print(f"   üìä After third: {stats_after_third['hit_count']} hits, {stats_after_third['miss_count']} misses")
            
            if stats_after_third['miss_count'] == 2:
                print("   ‚úÖ Cache miss for different user (correct isolation)")
            else:
                print("   ‚ö†Ô∏è  Unexpected cache behavior for different user")
        else:
            print(f"   ‚ùå Third request failed: {response3.status_code}")
    except Exception as e:
        print(f"   ‚ùå Third request error: {e}")
    
    # 5. Fourth request - same as second (expected cache hit again)
    print("\n5Ô∏è‚É£ Fourth Request - Repeat First User (Expected Cache Hit)...")
    
    start4 = time.time()
    try:
        response4 = requests.post(f"{BASE_URL}/chat", json=test_payload, timeout=45)
        time4 = (time.time() - start4) * 1000
        
        if response4.status_code == 200:
            print(f"   ‚úÖ Fourth request: {response4.status_code} - {time4:.2f}ms")
            
            # Check final cache stats
            final_stats = requests.get(f"{BASE_URL}/debug/cache").json()
            print(f"   üìä Final stats: {final_stats['hit_count']} hits, {final_stats['miss_count']} misses")
            
            if final_stats['hit_count'] == 2:
                print("   ‚úÖ Second cache hit recorded correctly!")
            else:
                print("   ‚ö†Ô∏è  Expected 2 cache hits, got different result")
        else:
            print(f"   ‚ùå Fourth request failed: {response4.status_code}")
    except Exception as e:
        print(f"   ‚ùå Fourth request error: {e}")
    
    # 6. Performance Analysis
    print("\n6Ô∏è‚É£ Performance Analysis...")
    
    final_cache_stats = requests.get(f"{BASE_URL}/debug/cache").json()
    
    print(f"   üìä Final Cache Statistics:")
    print(f"      Total Requests: {final_cache_stats['total_requests']}")
    print(f"      Cache Hits: {final_cache_stats['hit_count']}")
    print(f"      Cache Misses: {final_cache_stats['miss_count']}")
    print(f"      Hit Rate: {final_cache_stats['hit_rate']}")
    print(f"      Cache Size: {final_cache_stats['size']}")
    
    # Expected pattern: miss, hit, miss, hit = 2 hits out of 4 requests = 50%
    expected_hits = 2
    expected_misses = 2
    expected_hit_rate = 50.0
    
    actual_hits = final_cache_stats['hit_count']
    actual_misses = final_cache_stats['miss_count']
    actual_hit_rate = final_cache_stats['hit_rate_numeric']
    
    print(f"\n   üéØ Performance Validation:")
    print(f"      Expected: {expected_hits} hits, {expected_misses} misses, {expected_hit_rate}% hit rate")
    print(f"      Actual: {actual_hits} hits, {actual_misses} misses, {actual_hit_rate:.1f}% hit rate")
    
    if actual_hits == expected_hits and actual_misses == expected_misses:
        print("   üèÜ PERFECT! Cache working exactly as expected!")
        return True
    elif actual_hits >= expected_hits:
        print("   ‚úÖ EXCELLENT! Cache working better than expected!")
        return True
    elif actual_hits > 0:
        print("   ‚ö†Ô∏è  PARTIAL: Cache working but not optimally")
        return True
    else:
        print("   ‚ùå FAILED: Cache not working - no hits recorded")
        return False

def run_endpoint_validation():
    """Quick validation of all endpoints"""
    print("\nüîç Quick Endpoint Validation...")
    
    endpoints = [
        {"url": "/health", "desc": "Health check"},
        {"url": "/pipelines", "desc": "Pipeline list"},
        {"url": "/debug/cache", "desc": "Cache debug"},
        {"url": "/debug/config", "desc": "Config debug"}
    ]
    
    all_good = True
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{BASE_URL}{endpoint['url']}", timeout=10)
            if response.status_code == 200:
                print(f"   ‚úÖ {endpoint['desc']}: {response.status_code}")
            else:
                print(f"   ‚ùå {endpoint['desc']}: {response.status_code}")
                all_good = False
        except Exception as e:
            print(f"   ‚ùå {endpoint['desc']}: Error - {str(e)[:30]}...")
            all_good = False
    
    return all_good

if __name__ == "__main__":
    print("üöÄ Starting comprehensive test from clean cache state...\n")
    
    # Quick endpoint check first
    endpoints_ok = run_endpoint_validation()
    
    if endpoints_ok:
        print("   ‚úÖ All endpoints operational\n")
        
        # Run cache test
        cache_test_passed = fresh_cache_test()
        
        print(f"\n{'='*70}")
        if cache_test_passed:
            print("üéâ COMPREHENSIVE TEST PASSED!")
            print("‚úÖ Cache system is working perfectly from clean state")
            print("‚úÖ All expected cache hits and misses are working correctly")
            print("‚úÖ User isolation is functioning properly")
            print("‚úÖ Performance improvements are significant")
            print("\nüèÜ SYSTEM STATUS: FULLY OPTIMIZED AND PRODUCTION READY")
        else:
            print("‚ùå COMPREHENSIVE TEST FAILED!")
            print("‚ö†Ô∏è  Cache system needs further investigation")
    else:
        print("‚ùå ENDPOINT VALIDATION FAILED!")
        print("‚ö†Ô∏è  Some endpoints are not responding correctly")
